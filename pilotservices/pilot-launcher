#!/usr/bin/python

import os
import signal
import urllib
from optparse import OptionParser

from glideinwms_pilot.errors import PilotError
from glideinwms_pilot.errors import TimeoutError
from glideinwms_pilot.errors import ConfigError
from glideinwms_pilot.errors import ScriptError

from glideinwms_pilot.vm_utils import chown
from glideinwms_pilot.vm_utils import chmod
from glideinwms_pilot.vm_utils import cd
from glideinwms_pilot.vm_utils import drop_privs
from glideinwms_pilot.vm_utils import shutdown_vm
from glideinwms_pilot.vm_utils import daemonize
from glideinwms_pilot.vm_utils import ls_files_sorted
from glideinwms_pilot.vm_utils import sleep

from glideinwms_pilot.user_data import GlideinWMSUserData

from glideinwms_pilot.config import Config

from glideinwms_pilot.process_handling import execute_cmd

def retrieve_glidein_startup(config):
    try:
        url = "%s/glidein_startup.sh" % config.factory_url
        script = "%s/glidein_startup.sh" % config.home_dir
        script, _ = urllib.urlretrieve(url, script)
    except Exception, ex:
        raise PilotError("Error retrieving glidein_startup.sh: %s\n" % str(ex))

def run_scripts(directory, log_writer, max_script_runtime=60, arguments=[]):
    try:
        script_list = ls_files_sorted(directory)
    except Exception, e:
        message = "An Error has occured retrieving scripts: %s" % str(e)
        raise ScriptError(message)

    for script in script_list:
        try:
            cmd = "%s/%s" % (directory, script)
            log_writer.log_info("Executing script %s" % cmd)
            exit_code = execute_cmd(cmd, max_script_runtime, log_writer, 
                                    arguments, os.environ)
            log_writer.log_info("Executing script %s ... DONE" % cmd)
            # have to mod 256 because on some systems, instead of
            # returning 0 on success, 256 is returned
            if not int(exit_code) % 256 == 0:
                message = "The script (%s) has exited with Exit Code: %s" % (cmd, str(exit_code))
                log_writer.log_err(message)
        except Exception, e:
            message = "An Error has occured attempting to run script: %s" \
                      "\n\nError: %s" % (cmd, str(e))
            log_writer.log_err(message)


def main():
    """
    Perform all the work necessary to launch a glideinWMS pilot which will
    attempt to connect back to the user pool.

    1)  daemonize this script.  This script is lauched via the *nix service
        mechanisms.  We don't want to make it wait forever and we don't
        want it to be attached to a console.
    2)  Get the user data that was passed to the AMI - Currently it is a
        tarball.
    3)  untar the tarball.  The tarball will contain a proxy, the
        glidein_startup.sh script and an ini file containing all the extra
        information needed
    4)  read the ini file
    5)  get the arguments for the glidein_startup.sh script
    6)  create an environment string to pass with final command
    7)  launch the glidein pilot with the appropriate environment
    """

    usage = "usage: %prog [options] [Site FQDN]"
    parser = OptionParser(usage=usage)
    parser.add_option("-d", "--disable-daemon", action="store_true", 
                      dest="disable_daemon", default=False, 
                      help="Disable the daemon functionality and run in "\
                           "terminal")

    # if the directory, etc/glideinwms, does not exist lets assume that the 
    # config file is in the same directory.  We do this now so that this service
    # can be installed into CVMFS.  This is a nasty hack that isn't portable in 
    # the future, but is being done so that we can move forward.  We assume 
    # OpenStack since that is the current whim at CERN.
    init_config_directory = "/etc/glideinwms"
    if not os.path.exists(init_config_directory):
        init_config_directory = os.path.dirname(os.path.abspath(__file__))
    parser.add_option("-c", "--config-file", dest="config_file", 
                      default="%s/glidein-pilot.ini" % init_config_directory, 
                      help="Specify a custom config file")

    parser.add_option("-p", "--pid-file", dest="pid_file", 
                      default="/tmp/pilot.pid", help="Specify the pidfile")


    (options, args) = parser.parse_args()


    if options.disable_daemon:
        print "disable daemon call"
    else:
        daemonize(options.pid_file)

    # If config fails, we need to write error to console if available
    try:
        config = Config(options.config_file)
        config.setup()
        try:
            # Change to the working directory -- GUARANTEE A KNOWN start dir
            config.log.log_info('Changing to: %s' % config.home_dir)
            cd(config.home_dir)
            config.log.log_info('Now in: %s' % config.home_dir)

            # Run PRE scripts here
            message = "Running PRE Scripts in %s" % config.pre_script_dir
            config.log.log_info(message)
            run_scripts(config.pre_script_dir, config.log, 
                        float(config.max_script_runtime))
            message = "Running PRE Scripts in ... DONE"
            config.log.log_info(message)

            # Change to the working directory AGAIN -- IMPORTANT
            # Needed since PRE scripts may move the home area to a
            # bigger partition
            config.log.log_info('Changing to: %s' % config.home_dir)
            cd(config.home_dir)
            config.log.log_info('Now in: %s' % config.home_dir)

            # get and extract the user data - should be a tar file
            config.log.log_info("Retrieving and extracting user data")
            userdata = GlideinWMSUserData(config)
            userdata.extract_user_data()

            # Change the ownership of files in ~glidein_pilot before 
            # dropping privileges
            chown('%s.%s' % (config.glidein_user, config.glidein_user),
                  config.home_dir)
            chown('%s.%s' % (config.glidein_user, config.glidein_user),
                  config.scratch_dir)
            # drop privileges to the glidein user
            config.log.log_info("Dropping privs to %s" % config.glidein_user)
            drop_privs(config.glidein_user)

            # get the glidein_startup.sh script
            config.log.log_info("Retrieving glidein_startup.sh")
            retrieve_glidein_startup(config)
            chmod(0755, "%s/glidein_startup.sh" % config.home_dir)

            # configure pilot launch environment
            config.log.log_info("Configuring pilot environment...")
            config.log.log_info("    Username: %s" % config.glidein_user)

            pilot_env = config.get_custom_env()
            config.log.log_info("    Environment: %s" % str(pilot_env))

            pilot_args = config.pilot_args.split()
            pilot_args.insert(0, "glidein_startup.sh")
            config.log.log_info("Pilot arguments: %s" % str(pilot_args))

            # launch the pilot
            # The pilot will only be allowed to run for config.max_lifetime
            # seconds before being terminated
            glidein_startup = "%s/glidein_startup.sh" % config.home_dir
            config.log.log_info("Launching Pilot (%s)..." % glidein_startup)
            _ = execute_cmd(glidein_startup, 
                            float(config.max_lifetime), config.log, 
                            pilot_args, pilot_env)
        except ScriptError, ex:
            message = "An Error has occured: %s" % str(ex)
            config.log.log_err(message)
        except PilotError, ex:
            message = "A PilotError has occured: %s" % str(ex)
            config.log.log_err(message)
        except Exception, ex:
            config.log.log_err("Error launching pilot: %s" % str(ex))
    except ConfigError, ex:
        config.disable_shutdown = False

    try:
        try:
            message = "Running Post Scripts in %s" % config.post_script_dir
            config.log.log_info(message)
        except:
            # If a config error occured orginally, then logging isn't
            # available.  This is probably what brought us to this point
            pass

        # Always run POST Scripts
        run_scripts(config.post_script_dir, config.log, 
                    float(config.max_script_runtime))

        try:
            message = "Running Post Scripts ... DONE."
            config.log.log_info(message)
        except:
            # If a config error occured orginally, then logging isn't
            # available.  This is probably what brought us to this point
            pass
    except ScriptError, ex:
        try:
            message = "An Error has occured: %s" % str(ex)
            config.log.log_err(message)
        except:
            # If a config error occured orginally, then logging isn't
            # available.  This is probably what brought us to this point
            pass

    # No logging is available if the config.setup call errors, so don't try
    if config.disable_shutdown:
        print "shutdown disabled"
    else:
        ten_minutes = 600 # seconds
        sleep(ten_minutes)
        shutdown_vm(options.pid_file)

if __name__ == "__main__":
    main()
